class Solution {
    public int maxDepth(Node root) {
        //BFS
        int depth=0;
        if(root==null)return 0;
        Queue<Node>q=new LinkedList();
        
        q.offer(root);
        while(!q.isEmpty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                Node node=q.poll();
            for(Node child:node.children)
            { q.offer(child);}
            }   
            
            
        depth++;}
   return depth; }
}
------------------------
/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    //DFS
    int max_depth=0;
    public int maxDepth(Node root) {
        if(root==null)return 0;
        helper(root,1);
        return max_depth; 
    }
    void helper(Node node,int depth){
        max_depth=Math.max(max_depth,depth);
        for(Node child:node.children)
         helper(child,depth+1);
        
    }
}
