class Solution {
    //DFS
    public int minDepth(TreeNode root) {
        if(root==null)return 0;
        if(root.left==null &&root.right==null  )
        {
            return 1;
        }
          if(root.left==null)
        {
            return 1+minDepth(root.right);
        }
          if(root.right==null)
        {
            return 1+minDepth(root.left);
        }
        return 1+Math.min(minDepth(root.right),minDepth(root.left));
        
    }
}
------------------------
class Solution {
   
    public int minDepth(TreeNode root) {
        if(root==null)return 0;
        int minleft=minDepth(root.left);
         int minright=minDepth(root.right);
       
        if(minleft==0 || minright==0)
        { //skew tree
           return  1+Math.max(minleft,minright);
        }
        return 1+Math.min(minleft,minright);
        
    }
}
---------------------
class Solution {
   
    public int minDepth(TreeNode root) {
        if(root==null)return 0;
        //BFS
        Queue<TreeNode>q=new LinkedList();
        q.add(root);
        int depth=1;
        while(!q.isEmpty()){
            int size=q.size();
            while(size-->0){
                TreeNode node=q.poll();
                if(node.left==null && node.right==null)return depth;
                if(node.left!=null){
                    q.add(node.left);
                }
                if(node.right!=null){
                     q.add(node.right);
                }
            
            }
            depth++;
        }
        
    return 0;}
}
