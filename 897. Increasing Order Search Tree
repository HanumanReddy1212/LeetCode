
class Solution {
       ArrayList<TreeNode>al=new ArrayList();
    public TreeNode increasingBST(TreeNode root) {
        //naive sol:tc:o(n),sc:o(n)
     
        if(root==null)return null;
        inorder(root);
        al.get(al.size()-1).left=null;
        al.get(al.size()-1).right=null;
        for(int i=0;i<al.size()-1;i++){
            al.get(i).right=al.get(i+1);
            al.get(i).left=null;
        }
        return al.get(0);
        
    }
    void inorder(TreeNode node){
        if(node==null)return;
        inorder(node.left);
        al.add(node);
        inorder(node.right);
    }
}
-----------------------------------------

class Solution {
//n,n
    public TreeNode increasingBST(TreeNode root) {
        ArrayList<Integer>al=new ArrayList();
        inorder(root,al);
        TreeNode dummy=new TreeNode(0);
        TreeNode curr=dummy;
        for(int v:al){
            curr=curr.right=new TreeNode(v);
        }
    return dummy.right;}
    void inorder(TreeNode node,ArrayList<Integer>al){
        if(node==null)return;
        inorder(node.left,al);
        al.add(node.val);
        inorder(node.right,al);
    }
}
------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    //n,height of tree
    TreeNode curr;
    public TreeNode increasingBST(TreeNode root) {
      
        TreeNode dummy=new TreeNode(0);
        curr=dummy;
          inorder(root);
        return dummy.right;
    }
    void inorder(TreeNode root){
        if(root==null)return;
        inorder(root.left);
        root.left=null;
        curr=curr.right=root;
        inorder(root.right);
        
    }
}
