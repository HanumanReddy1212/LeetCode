class Solution {
    public boolean arrayStringsAreEqual(String[] word1, String[] word2) {
        int arrindex1=0; int arrindex2=0;
        int id1=0;int id2=0;
        while(arrindex1<word1.length && arrindex2<word2.length){
            if(word1[arrindex1].charAt(id1)!=word2[arrindex2].charAt(id2)){
                return false;
            }
            id1++;
            id2++;
            if(id1==word1[arrindex1].length()){
                id1=0;
                arrindex1++;
            }
             if(id2==word2[arrindex2].length()){
                id2=0;
                arrindex2++;
            }
        }
   return arrindex1==word1.length && arrindex2==word2.length; }
}
TC:o(n)
SC:o(1)
--------------------------------------------------
class Solution {
    public boolean arrayStringsAreEqual(String[] word1, String[] word2) {
        String s1="";
         String s2="";
     for(String s:word1){
         s1+=s;
     }   
         for(String s:word2){
         s2+=s;
     } 
        if(!s1.equals(s2))return false; 
    return true;}
}


--------------------------------------------------
class Solution {
    public boolean arrayStringsAreEqual(String[] word1, String[] word2) {
        return helper(word1).equals(helper(word2));
        
    }
    public String helper(String words[]){
        StringBuilder sb=new StringBuilder();
        for(String word:words){            
            sb.append(word);
        }
        return sb.toString();
    }
}
TC:max(l1,l2)
SC:o(k)
--------------------------------------------------
class Solution {
    public boolean arrayStringsAreEqual(String[] word1, String[] word2) {
        return String.join("",word1).equals(String.join("",word2));
    }
}
