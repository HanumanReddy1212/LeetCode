//BFS
class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        int sum=0;
        if(root==null)return sum;
        Queue<TreeNode>q=new LinkedList();
        q.add(root);
        while(!q.isEmpty()){
            TreeNode current=q.remove();
            if(current.val>=low &&current.val<=high){
                sum+=current.val;
            }
            if(current.left!=null && current.val>low){
                q.add(current.left);
            }
            if(current.right!=null && current.val<high){
                q.add(current.right);
            }
            
        }
    return sum;}
}
//DFS  Faster
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int sum;
    public int rangeSumBST(TreeNode root, int low, int high) {
        sum=0;
        range_sum(root, low,  high);
        return sum;
  
    }
    public void range_sum(TreeNode root, int l, int r){
        if(root!=null){
            if(root.val>=l &&root.val<=r){
                sum+=root.val;
            }
            if(root.val>l){
               range_sum(root.left, l,  r); 
            }
             if(root.val<r){
               range_sum(root.right, l,  r); 
            }
            
        }
    }
}
